package main

import (
	"crypto/ecdsa"
 	"crypto/elliptic"
	"golang.org/x/crypto/sha3"
 	"crypto/rand"
 	"fmt"
 	"hash"
 	"io"
 	"math/big"
 	"os"
)
func privKey(){
	pubkeyCurve := elliptic.P256()
	privatekey := new(ecdsa.PrivateKey)
	privatekey, err := ecdsa.GenerateKey(pubkeyCurve, rand.Reader)

	if err != nil{
		fmt.Println(err)
		os.Exit(1)
	}
func keys() {
	// see http://golang.org/pkg/crypto/elliptic/#P256
 	pubkeyCurve := elliptic.P256() 
	// Generates new private Key
 	privatekey := new(ecdsa.PrivateKey)
 	privatekey, err := ecdsa.GenerateKey(pubkeyCurve, rand.Reader) // this generates a public & private key pair

 	if err != nil {
 		fmt.Println(err)
 		os.Exit(1)
 	}

 	var pubkey ecdsa.PublicKey
 	pubkey = privatekey.PublicKey

 	fmt.Println("Private Key :")