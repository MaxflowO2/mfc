// (newtransaction.go) - Contains the core Transaction commands in mfc
// Copyright (C) 2021 MaxflowO2, the only author of Max Flow Chain
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package trans

import(
	"fmt"
        "bytes"
        "time"
        "math"
        "math/big"
	"crypto/ed25519"
	"encoding/json"
	"encoding/hex"
	"io/ioutil"
	//"github.com/boltdb/bolt"
        "golang.org/x/crypto/sha3"
)

// Mempool struct
// Used to create transactions within ./mfc
// Will be transmitted on ./mfc p2p
// v0.0.10
type Mempool struct {
        Timestamp       int64
        Sender          string
        Receiver        string
        Amount          uint64
        Type            string
        Name            string
        //ATPCost       uint
        Signature       []byte
}

// MinedMempool struct
// Is a mined Mempool struct using PoW functions below
// Will be inserted into a block as a string
// v0.0.10
type MinedMempool struct {
        mempool         Mempool
        Timestamp       int64
        IsValid         bool
        Rewards         string
        //ATPUsed       uint
        Nonce           int
        Hash            []byte
        Signature       []byte
}

// Creates a Mempool struct
func createMempool(r string, t string, a uint) Mempool {
	var value Mempool
	// Run mfc timestamp()
	value.Timestamp = utils.Timestamp()
	// Sender must be you
	// Load address from file
	value.Sender := address.LoadAddress()
	value.Receiver = r
	value.Type = t
	// Run BoltDB fetch for name
	//value.Name = Make a function
	value.Amount = a
	// CalculateATP()
	// makeMessage(Sender, Receiver, Amount, Type, Name, ATPCost)
	// Sign(makeMessage)
	// Make xxx.mempool
	value.ToFile()
	// Transmit on p2p as JSON
	return value
}

// Sends a Mempool struct
func sendMempool(m Mempool) bool {
	// open port
	// send json
	// close port
	return bool
}

func mineMempool(m Mempool) string {
	// Verify Sender
	// Verify Balance
	// Verify Receiver
	// Verify Amount > Balance
	// Verify Type exists
	// Verify TypeName
	// Verify ATPCost
	// Verify Signature
	// Run ChangeBal(Sender)
	// Run ChangeBal(Receiver)
	// Add Rewards (string)
	// Run ChangeBal(rewards)
	// Run PoW (nonce/hash)
	// Sign(hash)
	// Save file to Bolt.DB
	// all that shit to string
	// Return String
}

// ------------------ Proof of Work Functions ------------------ //

// powMempool struct
// Used as a struct for mining
// v0.0.10
type powMempool struct {
        toMine          *MinedMempool
        target          *big.Int
}

// Required for PoW functions
var maxTransNonce = math.MaxInt64

// newPowMempool
// Forced hash requiring 00 at start
// Returns *powMempool with new target and Mempool Struct
// v0.0.10
func newPowMempool(m *MinedMempool) *powMempool {
        target := big.NewInt(1)
        target.Lsh(target, uint(248)) // forced two 0's

        pow := &powMempool{m, target}

        return pow
}

// pow.Mine()
// v0.0.10
func (pow *powMempool) Mine() (int, []byte) {
        var hashInt big.Int
        var hash []byte
        nonce := 0
        for nonce < maxTransNonce {
                data := pow.prepMempool(nonce)
                hash = K12.Sum256(data)
                hashInt.SetBytes(hash)
                if hashInt.Cmp(pow.target) == -1 {
                        break
                } else {
                        nonce++
                }
        }
        return nonce, hash
}

// pow.prepMempool(nonce)
// Joins all elements of MinedMempool, to make a []byte
// Returns []byte
// v0.0.10
func (pow *powMempool) prepMempool(nonce int) []byte {
        data := bytes.Join(
                [][]byte{
                        IntToHex(pow.toMine.mempool.Timestamp),
                        []byte(pow.toMine.mempool.Sender),
                        []byte(pow.toMine.mempool.Receiver),
                        IntToHex(int64(pow.toMine.mempool.Amount)),
                        []byte(pow.toMine.mempool.Type),
                        []byte(pow.toMine.mempool.Name),
                        //IntToHex(int64(pow.toMine.mempool.ATPCost)),
                        pow.toMine.mempool.Signature,
                        IntToHex(pow.toMine.Timestamp),
                        []byte(strconv.FormatBool(pow.toMine.IsValid)),
                        []byte(pow.toMine.Rewards),
                        //IntToHex(int64(pow.toMine.ATPUsed)),
                        IntToHex(int64(nonce)),
                },
                []byte{},
        )
        return data
}

// pow.IsMineValid()
// part of pow *MinedMempool
// Returns bool
// v0.0.10
func (pow *powMempool) IsMineValid() bool {
        var hashInt big.Int

        data := pow.prepMempool(pow.toMine.Nonce)
        hash := K12.Sum256(data)
        hashInt.SetBytes(hash)

        isValid := hashInt.Cmp(powT.target) == -1

        return isValid
}

// ------------------ Bolt.DB Functions ------------------ //

// m.Marshal()
// *Mempool to JSON for Bolt.DB/Files
// Returns []byte
func (m *Mempool) Marshal() []byte {
        value, err := json.Marshal(m)
        if err != nil {
                fmt.Errorf("%v, couldn't Marshal\n", t)
        }
        return value
}

// m.ToFile()
func (m *Mempool) ToFile() {
	header := "user/mempool/"
	dotMempool := ".mempool"
	filename := header + hex.EncodeToString(m.Signature) + dotMempool
        file, err := json.MarshalIndent(m, "", " ")
        if err != nil {
                fmt.Errorf("%s did not Marshal\n", filename)
        }
        err = ioutil.WriteFile(filename, file, 0644)
        if err != nil {
                fmt.Errorf("%s did not save\n", filename)
        }
}
// UnmarshalMempool(d []byte)
// JSON to *Mempool for Bolt.DB/Files
// Returns *Mempool
func DeserializeTrans(d []byte) *Mempool {
        var value Mempool
        err := json.Unmarshal(d, &value)
        if err != nil {
                fmt.Errorf("%v, couldn't Unmarshal\n", &value)
        }
        return &value
}

